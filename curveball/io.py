# -*- coding: utf-8 -*-
import xlrd
import pandas as pd


def read_tecan_xlsx(filename, label, sheet=None, max_time=None, plate=None):
    """Reads growth measurements from a Tecan Infinity Excel output file.

    Args:
        filename: Path to the file (string).
        label: String or sequence of strings of measurment names used as titles of the data tables in the file.
        sheet: Sheet number, if known. Otherwise the function will try to guess the sheet.
        max_time: The maximal time, in hours (int).
        plate: A pandas DataFrame object representing a plate, usually generated by reading a CSV file generated by `Plato <http://plato.yoavram.com/>`_.

    Returns:
        A `pandasDataFrame` with the data. The `DataFrame` will have the columns:

        - `Time` (int, in hours)
        - `Temp. [°C]` (float)
        - `Cycle Nr.` (int)
        - `Well` (string): the well name, usually a letter for the row and a number of the column.
        - `Row` (string): the letter corresponding to the well row.
        - `Col` (string): the number corresponding to the well column.
        - `Strain` (string): if a `plate` was given, this is the strain name corresponding to the well from the plate.
        - `Color` (string, hex format): if a `plate` was given, this is the strain color corresponding to the well from the plate.

        There will also be a separate column for each label, and if there is more than one label, a separate `Time` and `Temp. [°C]` column for each label.

    Example:

    >>> plate = pd.read_csv("plate_templates/G-RG-R.csv")
    >>> df = curveball.io.read_tecan_xlsx("data/yoavram/210115.xlsx", ('OD','Green','Red'), max_time=12, plate=plate)
    >>> df.head()

    +----+-----------+-----------------+-------------+--------+--------+-------+-------+----------+---------+--------------+--------------------+---------+----------+--------------+-------+
    |    |   Time_OD |   Temp. [°C]_OD |   Cycle Nr. | Well   |     OD | Row   | Col   | Strain   | Color   |   Time_Green |   Temp. [°C]_Green |   Green |     Time |   Temp. [°C] |   Red |
    +====+===========+=================+=============+========+========+=======+=======+==========+=========+==============+====================+=========+==========+==============+=======+
    |  0 |  0        |            30   |           1 | A1     | 0.11   | A     | 1     | G        | #4daf4a |     0        |               30.1 |   28506 | 0        |         30.1 | 25396 |
    +----+-----------+-----------------+-------------+--------+--------+-------+-------+----------+---------+--------------+--------------------+---------+----------+--------------+-------+
    |  1 |  0.232444 |            30.3 |           2 | A1     | 0.1099 | A     | 1     | G        | #4daf4a |     0.232444 |               30.2 |   27507 | 0.232444 |         30.2 | 24806 |
    +----+-----------+-----------------+-------------+--------+--------+-------+-------+----------+---------+--------------+--------------------+---------+----------+--------------+-------+
    |  2 |  0.465694 |            30.1 |           3 | A1     | 0.1105 | A     | 1     | G        | #4daf4a |     0.465667 |               30   |   27324 | 0.465694 |         30.2 | 24549 |
    +----+-----------+-----------------+-------------+--------+--------+-------+-------+----------+---------+--------------+--------------------+---------+----------+--------------+-------+
    |  3 |  0.698111 |            30.1 |           4 | A1     | 0.1105 | A     | 1     | G        | #4daf4a |     0.698111 |               30.3 |   27104 | 0.698111 |         30.1 | 24012 |
    +----+-----------+-----------------+-------------+--------+--------+-------+-------+----------+---------+--------------+--------------------+---------+----------+--------------+-------+
    |  4 |  0.930556 |            30   |           5 | A1     | 0.1116 | A     | 1     | G        | #4daf4a |     0.930556 |               30.1 |   27128 | 0.930556 |         30.1 | 23763 |
    +----+-----------+-----------------+-------------+--------+--------+-------+-------+----------+---------+--------------+--------------------+---------+----------+--------------+-------+
    """
    wb = xlrd.open_workbook(filename)
    if sheet == None:
        for sh in wb.sheets():
            if sh.nrows > 0:
                break
    else:
        sh = wb.sheets()[sheet]

    if isinstance(label, str):
        label = [label]

    dataframes = []
    for lbl in label:
        for i in range(sh.nrows):
            row = sh.row_values(i)
            if row[0] == lbl:
                break

        data = {}
        for i in range(i+1, sh.nrows):
            row = sh.row(i)
            if row[0].value == '':
                break
            data[row[0].value] = [x.value for x in row[1:] if x.ctype == 2]

        min_length = min(map(len, data.values()))
        for k,v in data.items():
            data[k] =  v[:min_length]

        df = pd.DataFrame(data)
        df = pd.melt(df, id_vars=('Time [s]',u'Temp. [°C]','Cycle Nr.'), var_name='Well', value_name=lbl)
        df.rename(columns={'Time [s]': 'Time'}, inplace=True)
        df.Time = df.Time / 3600.
        df['Row'] = map(lambda x: x[0], df.Well)
        df['Col'] = map(lambda x: int(x[1:]), df.Well)
        if plate is None:
            df['Strain'] = 0
            df['Color'] = '#000000'
        else:
            df = pd.merge(df, plate, on=('Row','Col'))
        if not max_time:
            max_time = df.Time.max()
        df = df[df.Time < max_time]
        dataframes.append((lbl,df))

    if len(dataframes) == 0:
        return pd.DataFrame()
    if len(dataframes) == 1:
        return dataframes[0]
    else:
        # FIXME last label isn't used as a suffix, not sure why
        lbl,df = dataframes[0]
        lbl = '_' + lbl
        for lbli,dfi in dataframes[1:]:
            lbli = '_' + lbli
            df = pd.merge(df, dfi, on=('Cycle Nr.','Well','Row','Col','Strain','Color'), suffixes=(lbl,lbli))
        return df
